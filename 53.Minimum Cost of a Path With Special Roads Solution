template<typename T> void unique(vector<T> &a){sort(a.begin(), a.end()); a.resize(unique(a.begin(), a.end()) - a.begin());}
class Solution {
public:
    const int N = 1e5 + 1;
    int minimumCost(vector<int>& start, vector<int>& target, vector<vector<int>>& specialRoads) {
        int sx = start[0], sy = start[1], ex = target[0], ey = target[1];
        vector<long long> point; point.push_back(sx * 1LL * N + sy), point.push_back(ex * 1LL * N + ey);
        for (auto &e : specialRoads){
            int fx = e[0], fy = e[1], tx = e[2], ty = e[3], c = e[4];
            point.push_back(fx * 1LL * N + fy), point.push_back(tx * 1LL * N + ty);
        }
        unique(point);
        map<long long, int> uu;
        int ID = 0;
        auto get = [&](long long x){return (!uu.count(x) ? uu[x] = ID++ : uu[x]);};   
        get(sx * 1LL * N + sy), get(ex * 1LL * N + ey);
        for (auto &e : specialRoads){
            int fx = e[0], fy = e[1], tx = e[2], ty = e[3], c = e[4];
            get(fx * 1LL * N + fy), get(tx * 1LL * N + ty);
        }
        int dp[ID][ID];
        for (auto &e : point){
            int x1 = e / N, y1 = e % N;
            for (auto &f : point){
                int x2 = f / N, y2 = f % N;
                int x = get(e), y = get(f);
                dp[x][y] = abs(x1 - x2) + abs(y1 - y2);
            }
        }
        for (auto &e : specialRoads){
            int fx = e[0], fy = e[1], tx = e[2], ty = e[3], c = e[4];
            int x = get(fx * 1LL * N + fy), y = get(tx * 1LL * N + ty);
            dp[x][y] = min(dp[x][y], c);
        }
        for (int k = 0; k < ID; k++) for (int i = 0; i < ID; i++) for (int j = 0; j < ID; j++) dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);
        int x = get(sx * 1LL * N + sy), y = get(ex * 1LL * N + ey);
        return dp[x][y];
    }
};
